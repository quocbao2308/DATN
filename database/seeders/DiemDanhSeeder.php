<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\LichHoc\DiemDanh;
use App\Models\LichHoc\LichHoc;
use App\Models\DaoTao\LopHocPhan;
use Illuminate\Support\Facades\DB;

class DiemDanhSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // L·∫•y c√°c l·ªãch h·ªçc ƒë√£ t·ªìn t·∫°i
        $lichHocs = LichHoc::with('lopHocPhan')->get();

        if ($lichHocs->isEmpty()) {
            $this->command->warn('Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch h·ªçc. Vui l√≤ng ch·∫°y LichHocSeeder tr∆∞·ªõc!');
            return;
        }

        $this->command->info('B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu ƒëi·ªÉm danh...');

        $trangThais = ['co_mat', 'vang', 'di_tre', 'nghi_phep'];
        $diemDanhData = [];
        $count = 0;

        foreach ($lichHocs as $lichHoc) {
            // L·∫•y danh s√°ch sinh vi√™n trong l·ªõp h·ªçc ph·∫ßn
            $sinhViens = DB::table('sinh_vien_lop_hoc_phan')
                ->where('lop_hoc_phan_id', $lichHoc->lop_hoc_phan_id)
                ->pluck('sinh_vien_id');

            if ($sinhViens->isEmpty()) {
                continue;
            }

            foreach ($sinhViens as $sinhVienId) {
                // Random tr·∫°ng th√°i (80% c√≥ m·∫∑t, 10% v·∫Øng, 5% ƒëi tr·ªÖ, 5% ngh·ªâ ph√©p)
                $rand = rand(1, 100);
                if ($rand <= 80) {
                    $trangThai = 'co_mat';
                } elseif ($rand <= 90) {
                    $trangThai = 'vang';
                } elseif ($rand <= 95) {
                    $trangThai = 'di_tre';
                } else {
                    $trangThai = 'nghi_phep';
                }

                $diemDanhData[] = [
                    'sinh_vien_id' => $sinhVienId,
                    'lich_hoc_id' => $lichHoc->id,
                    'trang_thai' => $trangThai,
                    'ngay_diem_danh' => now(), // S·ª≠ d·ª•ng th·ªùi gian hi·ªán t·∫°i
                    'ghi_chu' => $this->getGhiChu($trangThai),
                    'created_at' => now(),
                    'updated_at' => now(),
                ];

                $count++;
            }
        }

        // Insert d·ªØ li·ªáu (c√≥ th·ªÉ chia nh·ªè n·∫øu qu√° l·ªõn)
        if (!empty($diemDanhData)) {
            // Insert theo chunks ƒë·ªÉ tr√°nh qu√° t·∫£i
            $chunks = array_chunk($diemDanhData, 500);
            foreach ($chunks as $chunk) {
                DiemDanh::insert($chunk);
            }

            $this->command->info('‚úÖ ƒê√£ t·∫°o ' . $count . ' b·∫£n ghi ƒëi·ªÉm danh!');

            // Th·ªëng k√™
            $coMat = DiemDanh::where('trang_thai', 'co_mat')->count();
            $vang = DiemDanh::where('trang_thai', 'vang')->count();
            $diTre = DiemDanh::where('trang_thai', 'di_tre')->count();
            $nghiPhep = DiemDanh::where('trang_thai', 'nghi_phep')->count();

            $this->command->info("üìä Th·ªëng k√™:");
            $this->command->info("   - C√≥ m·∫∑t: {$coMat} ({$this->getPercent($coMat,$count)}%)");
            $this->command->info("   - V·∫Øng: {$vang} ({$this->getPercent($vang,$count)}%)");
            $this->command->info("   - ƒêi tr·ªÖ: {$diTre} ({$this->getPercent($diTre,$count)}%)");
            $this->command->info("   - Ngh·ªâ ph√©p: {$nghiPhep} ({$this->getPercent($nghiPhep,$count)}%)");
        } else {
            $this->command->warn('Kh√¥ng c√≥ sinh vi√™n n√†o trong c√°c l·ªõp h·ªçc ph·∫ßn!');
        }
    }

    private function getGhiChu($trangThai)
    {
        $ghiChuCoMat = [null, 'Tham gia ƒë·∫ßy ƒë·ªß', 'C√≥ m·∫∑t ƒë√∫ng gi·ªù'];
        $ghiChuVang = ['V·∫Øng kh√¥ng ph√©p', 'Kh√¥ng c√≥ l√Ω do', 'Ch∆∞a b√°o tr∆∞·ªõc'];
        $ghiChuDiTre = ['ƒê·∫øn mu·ªôn 10 ph√∫t', 'ƒê·∫øn mu·ªôn 15 ph√∫t', 'T·∫Øc ƒë∆∞·ªùng'];
        $ghiChuNghiPhep = ['C√≥ ƒë∆°n xin ngh·ªâ', 'Ngh·ªâ ·ªëm', 'C√≥ vi·ªác gia ƒë√¨nh'];

        switch ($trangThai) {
            case 'co_mat':
                return $ghiChuCoMat[array_rand($ghiChuCoMat)];
            case 'vang':
                return $ghiChuVang[array_rand($ghiChuVang)];
            case 'di_tre':
                return $ghiChuDiTre[array_rand($ghiChuDiTre)];
            case 'nghi_phep':
                return $ghiChuNghiPhep[array_rand($ghiChuNghiPhep)];
            default:
                return null;
        }
    }

    private function getPercent($value, $total)
    {
        return $total > 0 ? round(($value / $total) * 100, 2) : 0;
    }
}
