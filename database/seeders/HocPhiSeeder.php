<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\HocPhi\HocPhi;
use App\Models\NhanSu\SinhVien;
use App\Models\HeThong\HocKy;
use Carbon\Carbon;

class HocPhiSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // L·∫•y danh s√°ch sinh vi√™n v√† h·ªçc k·ª≥
        $sinhViens = SinhVien::all();
        $hocKys = HocKy::orderBy('id', 'desc')->take(3)->get(); // L·∫•y 3 h·ªçc k·ª≥ g·∫ßn nh·∫•t

        if ($sinhViens->isEmpty() || $hocKys->isEmpty()) {
            $this->command->warn('Ch∆∞a c√≥ d·ªØ li·ªáu sinh vi√™n ho·∫∑c h·ªçc k·ª≥. Vui l√≤ng ch·∫°y seeder tr∆∞·ªõc!');
            return;
        }

        $this->command->info('B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu h·ªçc ph√≠...');

        $trangThais = ['chua_nop', 'da_nop', 'no'];
        $hocPhiData = [];

        foreach ($hocKys as $hocKy) {
            foreach ($sinhViens as $sinhVien) {
                // M·ªói sinh vi√™n c√≥ h·ªçc ph√≠ cho m·ªói h·ªçc k·ª≥
                $trangThai = $trangThais[array_rand($trangThais)];
                $soTien = rand(3000000, 8000000); // T·ª´ 3 - 8 tri·ªáu VNƒê

                $hocPhiData[] = [
                    'sinh_vien_id' => $sinhVien->id,
                    'hoc_ky_id' => $hocKy->id,
                    'so_tien' => $soTien,
                    'ngay_nop' => $trangThai == 'da_nop'
                        ? Carbon::now()->subDays(rand(1, 60))
                        : null,
                    'trang_thai' => $trangThai,
                    'ghi_chu' => $this->getGhiChu($trangThai),
                    'created_at' => now(),
                    'updated_at' => now(),
                ];
            }
        }

        // Insert d·ªØ li·ªáu
        HocPhi::insert($hocPhiData);

        $this->command->info('‚úÖ ƒê√£ t·∫°o ' . count($hocPhiData) . ' b·∫£n ghi h·ªçc ph√≠!');

        // Th·ªëng k√™
        $tongHocPhi = HocPhi::sum('so_tien');
        $daNop = HocPhi::where('trang_thai', 'da_nop')->count();
        $chuaNop = HocPhi::where('trang_thai', 'chua_nop')->count();
        $no = HocPhi::where('trang_thai', 'no')->count();

        $this->command->info("üìä Th·ªëng k√™:");
        $this->command->info("   - T·ªïng s·ªë ti·ªÅn: " . number_format($tongHocPhi) . " VNƒê");
        $this->command->info("   - ƒê√£ n·ªôp: {$daNop} b·∫£n ghi");
        $this->command->info("   - Ch∆∞a n·ªôp: {$chuaNop} b·∫£n ghi");
        $this->command->info("   - N·ª£: {$no} b·∫£n ghi");
    }

    private function getGhiChu($trangThai)
    {
        $ghiChuDaNop = [
            'ƒê√£ n·ªôp ƒë·∫ßy ƒë·ªß qua chuy·ªÉn kho·∫£n',
            'N·ªôp ti·ªÅn m·∫∑t t·∫°i ph√≤ng t√†i v·ª•',
            'Thanh to√°n online',
            'ƒê√£ ho√†n th√†nh nghƒ©a v·ª• h·ªçc ph√≠',
        ];

        $ghiChuChuaNop = [
            'Ch∆∞a ƒë·∫øn h·∫°n n·ªôp',
            'ƒêang ch·ªù x√°c nh·∫≠n t·ª´ ng√¢n h√†ng',
            null,
        ];

        $ghiChuNo = [
            'Qu√° h·∫°n n·ªôp, c·∫ßn li√™n h·ªá ph√≤ng t√†i v·ª•',
            'ƒêang l√†m th·ªß t·ª•c ho√£n h·ªçc ph√≠',
            'Ch∆∞a n·ªôp ƒë·ªß, c√≤n thi·∫øu m·ªôt ph·∫ßn',
            'N·ª£ h·ªçc ph√≠ h·ªçc k·ª≥ tr∆∞·ªõc',
        ];

        switch ($trangThai) {
            case 'da_nop':
                return $ghiChuDaNop[array_rand($ghiChuDaNop)];
            case 'chua_nop':
                return $ghiChuChuaNop[array_rand($ghiChuChuaNop)];
            case 'no':
                return $ghiChuNo[array_rand($ghiChuNo)];
            default:
                return null;
        }
    }
}
